source('~/Projects/Coursera/DataScience/ProgrammingAssignment2/cachematrix.R')
source('~/Projects/Coursera/DataScience/ProgrammingAssignment2/cachematrix.R')
source('~/Projects/Coursera/DataScience/ProgrammingAssignment2/cachematrix.R')
source('~/Projects/Coursera/DataScience/ProgrammingAssignment2/cachematrix.R')
qim1 <- matrix(c(2, 1, 7, 4, 5, 4, 3, 7, 3), nrow = 3, ncol = 3)
qim1
makeCacheMatrix(qim1)
makeCacheMatrix$get
makeCacheMatrix$get()
source('~/Projects/Coursera/DataScience/ProgrammingAssignment2/cachematrix.R')
qim1
mcm1 <- makeCacheMatrix()
mcm1
mcm1$get()
cacheSolve(qim1)
cacheSolve(mcm1)
cacheSolve(mcm1)
source('~/Projects/Coursera/DataScience/ProgrammingAssignment2/cachematrix.R')
source('~/Projects/Coursera/DataScience/ProgrammingAssignment2/cachematrix.R')
library(datasets)
?iris
iris
vir <- subset(iris, Species == virginica)
vir <- subset(iris, Species == 'virginica')
vir
mean(vir$Sepal.Length)
v1 <- colMeans(iris)
apply(iris, 1, mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
data(mtcars)
mtcars
with(mtcars, tapply(mpg, cyl, mean))
apply(mtcars, 2, mean)
split(mtcars, mtcars$cyl)
lapply(mtcars, mean)
with(mtcars, tapply(hp, cyl, mean))
abs(with(mtcars, tapply(hp, cyl, mean))$8 - with(mtcars, tapply(hp, cyl, mean))$4)
four <- with(mtcars, tapply(hp, cyl, mean))$8
four <- with(mtcars, tapply(hp, cyl, mean))[1]
four
eight <- with(mtcars, tapply(hp, cyl, mean))[3]
eight - four
debug(ls)
ls
ls()
exit
exit()
end()
iris
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(mtcars, cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
source('~/Projects/Coursera/DataScience/GettingAndCleaningData/Quiz2/Quiz2.R')
installed.packages("tidyr")
library("swrl")
library("swirl")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head()
head(mtdf)
head(mydf)
library(dplyr)
library("dplyr")
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mtdf")
rm("mydf")
?tbl_df
cran
?select
select(cran, ip_id, package, country
)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:time))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version)
)
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
)
Try arrange(cran2, package, ip_id)
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
tbl_df(mydf)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
?count
submit()
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count)
)
View()
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View()
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View()
View(top_unique_sorted)
submit()
submit()
submit()
View()
View(results3)
View(result3)
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, n())
res <- gather(students2, sex_class, count)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
submit()
students3
submit()
submit()
?spread
?spread
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
extract_numeric("class5")
submit()
students5
students4
students4
submit()
submit()
submit()
passed
failed
mutate(passed, status = "passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
bind_rows(passed, failed)
sat
submit()
submit()
setwd("~/Projects/Coursera/DataScience/ReproducibleResearch/RepData_PeerAssessment2/")
getwd()
library(dplyr)
library('dplyr')
